---
description: 증권사 API 연동 참고 자료 - 키움증권과 한국투자증권 API 사용법, 공통 구현 패턴, 보안 고려사항
globs: ["**/*broker*.py", "**/*api*.py", "**/services/*.py"]
alwaysApply: false
---

# 증권사 API 연동 참고 자료

## 키움증권 (영웅문) API

### 기본 정보
- **API 타입**: COM 기반
- **플랫폼**: Windows 전용
- **라이브러리**: `pywin32`, `kiwoom`
- **인증**: 영웅문 프로그램 로그인 필요

### 주요 메서드
```python
# 계좌 정보 조회
def get_account_info(self):
    # 계좌번호, 계좌명, 계좌타입 조회
    
# 잔고 조회
def get_balance(self, account_number):
    # 현금잔고, 주식잔고, 총자산 조회
    
# 보유종목 조회
def get_holdings(self, account_number):
    # 종목코드, 종목명, 수량, 평균단가, 현재가, 평가금액, 손익 조회
    
# 거래내역 조회
def get_transactions(self, account_number, start_date, end_date):
    # 거래일자, 종목코드, 거래구분, 수량, 단가, 거래금액, 수수료 조회
```

### 주의사항
- 영웅문 프로그램이 실행 중이어야 함
- COM 객체 초기화 필요
- API 호출 간격 제한 (0.2초 이상)
- 에러 처리 필수

## 한국투자증권 API

### 기본 정보
- **API 타입**: REST API
- **플랫폼**: 크로스 플랫폼
- **라이브러리**: `requests`, `websocket-client`
- **인증**: OAuth 2.0 (App Key, App Secret)
- **베이스 URL**: `https://openapi.koreainvestment.com:9443`

### 주요 엔드포인트

#### 1. 토큰 발급
```python
POST /oauth2/tokenP
{
    "grant_type": "client_credentials",
    "appkey": "your_app_key",
    "appsecret": "your_app_secret"
}
```

#### 2. 계좌 잔고 조회 (통합 API)
```python
GET /uapi/domestic-stock/v1/trading/inquire-balance
Headers: {
    "authorization": "Bearer {access_token}",
    "appkey": "your_app_key",
    "appsecret": "your_app_secret",
    "tr_id": "TTTC8434R"
}
Parameters: {
    "CANO": "계좌번호_앞8자리",
    "ACNT_PRDT_CD": "01",
    "AFHR_FLPR_YN": "N",
    "OFL_YN": "N",
    "INQR_DVSN": "01",
    "UNPR_DVSN": "01"
}
```

**응답 구조:**
- `output1`: 보유종목 리스트 (종목코드, 종목명, 수량, 평균단가, 현재가, 평가금액, 손익, 손익률)
- `output2`: 계좌 요약 정보 (총예수금, 총자산, 평가금액, 평가손익, 평가손익률)

**특징:**
- 단일 API 호출로 계좌 잔고, 보유종목, 종목 가격 정보를 모두 조회 가능
- 보유종목의 현재가, 등락률, 손익 정보를 실시간으로 제공
- 종목별 상세 정보 (수량, 평균단가, 평가금액, 손익률) 포함

### API 제한사항
- 초당 10회, 분당 100회 호출 제한
- 토큰 만료 시 자동 갱신 필요
- 실시간 데이터는 WebSocket 사용

## 공통 구현 패턴

### 1. 브로커 인터페이스
```python
from abc import ABC, abstractmethod

class BaseBroker(ABC):
    @abstractmethod
    def connect(self):
        pass
    
    @abstractmethod
    def get_accounts(self):
        pass
    
    @abstractmethod
    def get_balance(self, account_number):
        pass
    
    @abstractmethod
    def get_holdings(self, account_number):
        pass
    
    @abstractmethod
    def get_transactions(self, account_number, start_date, end_date):
        pass
```

### 2. 에러 처리
```python
class BrokerError(Exception):
    def __init__(self, message, error_code=None):
        self.message = message
        self.error_code = error_code
        super().__init__(self.message)

# 사용 예시
try:
    balance = broker.get_balance(account_number)
except BrokerError as e:
    logger.error(f"계좌 조회 실패: {e.message}")
    # 재시도 로직 또는 알림
```

### 3. 재시도 로직
```python
import time
from functools import wraps

def retry(max_attempts=3, delay=1):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            for attempt in range(max_attempts):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_attempts - 1:
                        raise
                    time.sleep(delay * (2 ** attempt))
            return None
        return wrapper
    return decorator
```

## 보안 고려사항

### 1. 인증정보 암호화
```python
from cryptography.fernet import Fernet

class CredentialManager:
    def __init__(self, key):
        self.cipher = Fernet(key)
    
    def encrypt_credential(self, credential):
        return self.cipher.encrypt(credential.encode()).decode()
    
    def decrypt_credential(self, encrypted_credential):
        return self.cipher.decrypt(encrypted_credential.encode()).decode()
```

### 2. 환경변수 관리
```python
import os
from dotenv import load_dotenv

load_dotenv()

# 민감한 정보는 환경변수로 관리
KIWOOM_USER_ID = os.getenv('KIWOOM_USER_ID')
KIWOOM_PASSWORD = os.getenv('KIWOOM_PASSWORD')
KIS_APP_KEY = os.getenv('KIS_APP_KEY')
KIS_APP_SECRET = os.getenv('KIS_APP_SECRET')
```

## 로깅 전략

### 1. API 호출 로깅
```python
import logging

logger = logging.getLogger(__name__)

def log_api_call(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logger.info(f"API 호출 시작: {func.__name__}")
        try:
            result = func(*args, **kwargs)
            logger.info(f"API 호출 성공: {func.__name__}")
            return result
        except Exception as e:
            logger.error(f"API 호출 실패: {func.__name__}, 에러: {str(e)}")
            raise
    return wrapper
```

### 2. 민감정보 마스킹
```python
def mask_sensitive_data(data):
    if isinstance(data, dict):
        masked = data.copy()
        for key in ['password', 'secret', 'token', 'key']:
            if key in masked:
                masked[key] = '***'
        return masked
    return data
```